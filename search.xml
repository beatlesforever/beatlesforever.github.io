<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python编程从入门到实践笔记</title>
      <link href="/2023/06/30/python%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/30/python%E7%BC%96%E7%A8%8B%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python编程从入门到实践"><a href="#python编程从入门到实践" class="headerlink" title="python编程从入门到实践"></a>python编程从入门到实践</h1><h2 id="第二章-变量和简单数据类型"><a href="#第二章-变量和简单数据类型" class="headerlink" title="第二章 变量和简单数据类型"></a>第二章 变量和简单数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title() <span class="comment">#首字母大写</span></span><br><span class="line">upper() <span class="comment">#字母全部大写</span></span><br><span class="line">lower() <span class="comment">#字母全部小写</span></span><br></pre></td></tr></table></figure><h4 id="f字符串"><a href="#f字符串" class="headerlink" title="f字符串"></a>f字符串</h4><p>要在字符串中插入变量的值，可在前引号前加上字母 f，再将要插入的变量放在花括号内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">&quot;ada&quot;</span> </span><br><span class="line">last_name = <span class="string">&quot;lovelace&quot;</span> </span><br><span class="line">full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(full_name) </span><br></pre></td></tr></table></figure><h4 id="format-方法"><a href="#format-方法" class="headerlink" title="format()方法"></a>format()方法</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">full_name = <span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(first_name, last_name)</span><br></pre></td></tr></table></figure><h4 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rstrip() <span class="comment">#删除字符串末尾的空白</span></span><br><span class="line">lstrip() <span class="comment">#删除字符串开头的空白</span></span><br><span class="line">strip() <span class="comment">#删除字符串两边的空白</span></span><br></pre></td></tr></table></figure><h3 id="数"><a href="#数" class="headerlink" title="数"></a>数</h3><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>书写很大的数时，可使用下划线将其中的数字分组，使其更清晰易读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">universe_age = <span class="number">14_000_000_000</span> <span class="comment">#Python 不会打印其中的下划线</span></span><br></pre></td></tr></table></figure><h4 id="同时给多个变量赋值"><a href="#同时给多个变量赋值" class="headerlink" title="同时给多个变量赋值"></a>同时给多个变量赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> </span><br></pre></td></tr></table></figure><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>常量命名时字母全部大写</p><h3 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><h2 id="第三章-列表简介"><a href="#第三章-列表简介" class="headerlink" title="第三章 列表简介"></a>第三章 列表简介</h2><h3 id="列表简介"><a href="#列表简介" class="headerlink" title="列表简介"></a>列表简介</h3><p>列表由一系列按特定顺序排列的元素组成。</p><p>在 Python 中，用方括号（[]）表示列表，并用逗号分隔其中的元素。</p><h4 id="访问列表"><a href="#访问列表" class="headerlink" title="访问列表"></a>访问列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>]) </span><br></pre></td></tr></table></figure><h4 id="索引从0开始"><a href="#索引从0开始" class="headerlink" title="索引从0开始"></a>索引从0开始</h4><p>没什么好解释的，懂得都懂  :joy:</p><h3 id="修改、添加和删除元素"><a href="#修改、添加和删除元素" class="headerlink" title="修改、添加和删除元素"></a>修改、添加和删除元素</h3><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line">motorcycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span> </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p><code>append</code>：在末尾插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>) </span><br></pre></td></tr></table></figure><p><code>insert()</code>：在任意位置插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>del</code>：删除任意位置元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><p><code>pop()</code>：删除列表末尾的元素，并让你能够接着使用它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line">popped_motorcycle = motorcycles.pop() </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle)</span><br></pre></td></tr></table></figure><p><strong>pop()也可以删除任意位置元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">first_owned = motorcycles.pop(<span class="number">0</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The first motorcycle I owned was a <span class="subst">&#123;first_owned.title()&#125;</span>.&quot;</span>) </span><br></pre></td></tr></table></figure><p><code>remove</code>：根据值删除元素 (只删除第一个指定的值)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br></pre></td></tr></table></figure><h3 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h3><h4 id="永久排序"><a href="#永久排序" class="headerlink" title="永久排序"></a>永久排序</h4><h5 id="sort：按字母顺序排列"><a href="#sort：按字母顺序排列" class="headerlink" title="sort：按字母顺序排列"></a><code>sort</code>：按字母顺序排列</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">cars.sort() </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br></pre></td></tr></table></figure><h5 id="sort-按字母顺序相反顺序排列"><a href="#sort-按字母顺序相反顺序排列" class="headerlink" title="sort:按字母顺序相反顺序排列"></a><code>sort</code>:按字母顺序相反顺序排列</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br></pre></td></tr></table></figure><h4 id="临时排序"><a href="#临时排序" class="headerlink" title="临时排序"></a>临时排序</h4><p><code>sorted</code>：调用函数 sorted()后，列表元素的排列顺序并没有变。如果要按与字母顺序 相反的顺序显示列表，也可向函数 sorted()传递参数 reverse&#x3D;True。</p><h4 id="倒着打印列表"><a href="#倒着打印列表" class="headerlink" title="倒着打印列表"></a>倒着打印列表</h4><p><code>reverse()</code>：反转列表元素的排列顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br><span class="line">cars.reverse() </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br></pre></td></tr></table></figure><h4 id="确定列表的长度"><a href="#确定列表的长度" class="headerlink" title="确定列表的长度"></a>确定列表的长度</h4><p><code>len()</code>：可快速获悉列表的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line"><span class="built_in">len</span>(cars) </span><br></pre></td></tr></table></figure><h3 id="使用列表时避免索引错误"><a href="#使用列表时避免索引错误" class="headerlink" title="使用列表时避免索引错误"></a>使用列表时避免索引错误</h3><p><strong><u>索引从0开始</u></strong></p><p><strong>索引-1 总是返回最后一个列表元素</strong></p><h2 id="第四章-操作列表"><a href="#第四章-操作列表" class="headerlink" title="第四章 操作列表"></a>第四章 操作列表</h2><h3 id="遍历整个列表"><a href="#遍历整个列表" class="headerlink" title="遍历整个列表"></a>遍历整个列表</h3><p><code>for循环</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians: </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;magician.title()&#125;</span>, that was a great trick!&quot;</span>) </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;I can&#x27;t wait to see your next trick, <span class="subst">&#123;magician.title()&#125;</span>.\n&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Thank you, everyone. That was a great magic show!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="避免缩进错误"><a href="#避免缩进错误" class="headerlink" title="避免缩进错误"></a>避免缩进错误</h3><p><strong>Python 根据缩进来判断代码行与前一个代码行的关系。</strong></p><h4 id="忘记缩进"><a href="#忘记缩进" class="headerlink" title="忘记缩进"></a>忘记缩进</h4><h4 id="忘记缩进额外的代码行"><a href="#忘记缩进额外的代码行" class="headerlink" title="忘记缩进额外的代码行"></a>忘记缩进额外的代码行</h4><h4 id="不必要的缩进"><a href="#不必要的缩进" class="headerlink" title="不必要的缩进"></a>不必要的缩进</h4><h4 id="循环后不必要的缩进"><a href="#循环后不必要的缩进" class="headerlink" title="循环后不必要的缩进"></a>循环后不必要的缩进</h4><h4 id="遗漏了冒号"><a href="#遗漏了冒号" class="headerlink" title="遗漏了冒号"></a>遗漏了冒号</h4><blockquote><p>for 语句末尾的冒号告诉 Python，下一行是循环的第一行。</p></blockquote><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><h4 id="使用函数-range"><a href="#使用函数-range" class="headerlink" title="使用函数 range()"></a>使用函数 range()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>): </span><br><span class="line">    <span class="built_in">print</span>(value) </span><br></pre></td></tr></table></figure><blockquote><p>只会打印从1到4的数，到第二个值时停止</p></blockquote><h4 id="使用-range-创建数字列表"><a href="#使用-range-创建数字列表" class="headerlink" title="使用 range()创建数字列表"></a>使用 range()创建数字列表</h4><p>要创建数字列表，可使用函数 list()将 range()的结果直接转换为列表。如果将 range()作 为 list()的参数，输出将是一个数字列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)) </span><br><span class="line"><span class="built_in">print</span>(numbers) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>)) <span class="comment">#从 2 开始数，然后不断加 2，直到达到或超过终值</span></span><br><span class="line"><span class="built_in">print</span>(even_numbers) </span><br></pre></td></tr></table></figure><p><code>**</code>表示乘方运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square = value ** <span class="number">2</span> <span class="comment">#相当于平方</span></span><br></pre></td></tr></table></figure><h4 id="简单统计计算"><a href="#简单统计计算" class="headerlink" title="简单统计计算"></a>简单统计计算</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">min</span>()</span><br><span class="line"><span class="built_in">max</span>()</span><br><span class="line"><span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><h4 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h4><p>列表解析将 for 循环和创建新元素的代码合并成一行，并自动附加新元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)] </span><br><span class="line"><span class="built_in">print</span>(squares) </span><br><span class="line"><span class="comment">#结果是：[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><h3 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h3><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。</p><p>与函数 range()一样， Python 在到达第二个索引之前的元素后停止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment">#结果是三个</span></span><br></pre></td></tr></table></figure><p>如果没有指定第一个索引，Python 将自动从列表开头开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>]) </span><br></pre></td></tr></table></figure><p>让切片终止于列表末尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:]) <span class="comment">#返回从第三个元素到列表末尾的所有元素</span></span><br></pre></td></tr></table></figure><p>负数索引返回离列表末尾相应距离的元素，因此你可以输出列表末尾的任意切片。例如，如果要 输出名单上的最后三名队员，可使用切片 players[-3:]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:]) </span><br></pre></td></tr></table></figure><blockquote><p>可在表示切片的方括号内指定第三个值。这个值告诉 Python 在指定范围内每隔多少元素 提取一个。</p></blockquote><h4 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h4><p>如果要遍历列表的部分元素，可在 for 循环中使用切片。</p><h4 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h4><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引（[:]）。 这让 Python 创建一个始于第一个元素、终止于最后一个元素的切片，即整个列表的副本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>] </span><br><span class="line">friend_foods = my_foods[:] </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>] </span><br><span class="line"><span class="comment"># 这行不通：</span></span><br><span class="line"> friend_foods = my_foods </span><br><span class="line">my_foods.append(<span class="string">&#x27;cannoli&#x27;</span>) </span><br><span class="line">friend_foods.append(<span class="string">&#x27;ice cream&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里将 my_foods 赋给 friend_foods，而不是将 my_foods 的副本赋给 friend_foods（见）。 这种语法实际上是让 Python 将新变量 friend_foods 关联到已与 my_foods 相关联的列表，因此这 两个变量指向同一个列表。</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>Python 将不能修改的值称为不可变的，而不可变的列表被称为元组。</p><h4 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h4><p>元组看起来很像列表，但使用圆括号而非中括号来标识。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><h4 id="遍历元组中的所有值"><a href="#遍历元组中的所有值" class="headerlink" title="遍历元组中的所有值"></a>遍历元组中的所有值</h4><p>采用for循环</p><h4 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h4><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original dimensions:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line"><span class="built_in">print</span>(dimension) </span><br><span class="line">    </span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line"><span class="built_in">print</span>(dimension) </span><br></pre></td></tr></table></figure><h3 id="设置代码格式"><a href="#设置代码格式" class="headerlink" title="设置代码格式"></a>设置代码格式</h3><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>PEP 8 建议每级缩进都使用四个空格。</p><h4 id="行长"><a href="#行长" class="headerlink" title="行长"></a>行长</h4><p>很多 Python 程序员建议每行不超过 80 字符。</p><p>在大多数编辑器中，可以设置一个视觉标志（通常是一条竖线），让你知道不能越过的界线在什么地方</p><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>将程序的不同部分分开，可使用空行。</p><h2 id="第五章-if语句"><a href="#第五章-if语句" class="headerlink" title="第五章 if语句"></a>第五章 if语句</h2><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars: </span><br><span class="line"><span class="keyword">if</span> car == <span class="string">&#x27;bmw&#x27;</span>: </span><br><span class="line"> <span class="built_in">print</span>(car.upper()) </span><br><span class="line"> <span class="keyword">else</span>: </span><br><span class="line"> <span class="built_in">print</span>(car.title())</span><br></pre></td></tr></table></figure><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><p>每条 if 语句的核心都是一个值为 True 或 False 的表达式，这种表达式称为条件测试</p><h4 id="检查是否相等"><a href="#检查是否相等" class="headerlink" title="检查是否相等"></a>检查是否相等</h4><p><code>==</code> 使用两个等号&#96;</p><h4 id="检查是否相等时忽略大小写"><a href="#检查是否相等时忽略大小写" class="headerlink" title="检查是否相等时忽略大小写"></a>检查是否相等时忽略大小写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">&#x27;Audi&#x27;</span></span><br><span class="line">car.lower() == <span class="string">&#x27;audi&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="检查是否不相等"><a href="#检查是否不相等" class="headerlink" title="检查是否不相等"></a>检查是否不相等</h4><p><code>!=</code> 使用!&#x3D;</p><h4 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h4><h5 id="使用-and-检查多个条件"><a href="#使用-and-检查多个条件" class="headerlink" title="使用 and 检查多个条件"></a>使用 and 检查多个条件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age_0 = <span class="number">22</span></span><br><span class="line">age_1 = <span class="number">18</span></span><br><span class="line">age_0 &gt;= <span class="number">21</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">21</span></span><br></pre></td></tr></table></figure><h5 id="使用-or-检查多个条件"><a href="#使用-or-检查多个条件" class="headerlink" title="使用 or 检查多个条件"></a>使用 or 检查多个条件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age_0 = <span class="number">22</span></span><br><span class="line">age_1 = <span class="number">18</span></span><br><span class="line">age_0 &gt;= <span class="number">21</span> <span class="keyword">or</span> age_1 &gt;= <span class="number">21</span></span><br></pre></td></tr></table></figure><h4 id="检查特定值是否包含在列表中"><a href="#检查特定值是否包含在列表中" class="headerlink" title="检查特定值是否包含在列表中"></a>检查特定值是否包含在列表中</h4><p>使用关键字<code>in</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;onions&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings</span><br></pre></td></tr></table></figure><h4 id="检查特定值是否不包含在列表中"><a href="#检查特定值是否不包含在列表中" class="headerlink" title="检查特定值是否不包含在列表中"></a>检查特定值是否不包含在列表中</h4><p>使用关键字<code>not in</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">banned_users = [<span class="string">&#x27;andrew&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>, <span class="string">&#x27;david&#x27;</span>] </span><br><span class="line">user = <span class="string">&#x27;marie&#x27;</span> </span><br></pre></td></tr></table></figure><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">17</span> </span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>: <span class="comment">#别忘了冒号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>: <span class="comment">#别忘了冒号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sorry, you are too young to vote.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Please register to vote as soon as you turn 18!&quot;</span>) </span><br></pre></td></tr></table></figure><h4 id="if-elif-else结构"><a href="#if-elif-else结构" class="headerlink" title="if-elif-else结构"></a>if-elif-else结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">price = <span class="number">0</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">price = <span class="number">25</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>: </span><br><span class="line">price = <span class="number">40</span> </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    price = <span class="number">20</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Your admission cost is $<span class="subst">&#123;price&#125;</span>.&quot;</span>) </span><br></pre></td></tr></table></figure><blockquote><p>也可以省略else代码块</p></blockquote><h2 id="第六章-字典"><a href="#第六章-字典" class="headerlink" title="第六章 字典"></a>第六章 字典</h2><h3 id="一个简单的字典"><a href="#一个简单的字典" class="headerlink" title="一个简单的字典"></a>一个简单的字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>]) </span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h3><p>在 Python 中，字典是一系列键值对。每个键都与一个值相关联，你可使用键来访问相关联 的值。</p><p>键值对是两个相关联的值。指定键时，Python 将返回与之相关联的值。键和值之间用冒号分 隔，而键值对之间用逗号分隔。</p><h4 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h4><p>字典是一种动态结构，可随时在其中添加键值对。要添加键值对，可依次指定字典名、用方 括号括起的键和相关联的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span> </span><br></pre></td></tr></table></figure><h4 id="先创建一个空字典"><a href="#先创建一个空字典" class="headerlink" title="先创建一个空字典"></a>先创建一个空字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125; </span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h4><p>可使用 del 语句将相应的键值对彻底删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;points&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br></pre></td></tr></table></figure><h4 id="使用-get-来访问值"><a href="#使用-get-来访问值" class="headerlink" title="使用 get()来访问值"></a>使用 get()来访问值</h4><p>可使用方法 get()在指定的键不存在时返回一个默认值，从而避免这样的错误</p><p>方法 get()的第一个参数用于指定键，是必不可少的；第二个参数为指定的键不存在时要返 回的值，是可选的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125; </span><br><span class="line">point_value = alien_0.get(<span class="string">&#x27;points&#x27;</span>, <span class="string">&#x27;No point value assigned.&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(point_value)</span><br></pre></td></tr></table></figure><blockquote><p>如果字典中有键’points’，将获得与之相关联的值；如果没有，将获得指定的默认值。虽然这里没有键’points’，但将获得一条清晰的消息，不会引发错误</p><p>调用 get()时，如果没有指定第二个参数且指定的键不存在，Python 将返回值 None。这 个特殊值表示没有相应的值。None 并非错误，而是一个表示所需值不存在的特殊值</p></blockquote><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><h4 id="遍历所有键值对"><a href="#遍历所有键值对" class="headerlink" title="遍历所有键值对"></a>遍历所有键值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123; </span><br><span class="line"> <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items(): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nKey: <span class="subst">&#123;key&#125;</span>&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Value: <span class="subst">&#123;value&#125;</span>&quot;</span>) </span><br></pre></td></tr></table></figure><blockquote><p>方法 items()返回一个键值对列表。</p></blockquote><h4 id="遍历字典中的所有键"><a href="#遍历字典中的所有键" class="headerlink" title="遍历字典中的所有键"></a>遍历字典中的所有键</h4><p>在不需要使用字典中的值时，方法 keys()很有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"> <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys(): </span><br><span class="line"><span class="built_in">print</span>(name.title()) </span><br></pre></td></tr></table></figure><blockquote><p>遍历字典时，会默认遍历所有的键</p></blockquote><h4 id="按特定顺序遍历字典中的所有键"><a href="#按特定顺序遍历字典中的所有键" class="headerlink" title="按特定顺序遍历字典中的所有键"></a>按特定顺序遍历字典中的所有键</h4><p>从 Python 3.7 起，遍历字典时将按插入的顺序返回其中的元素。</p><p>要以特定顺序返回元素，一种办法是在 for 循环中对返回的键进行排序。使用函数<code>sorted()</code></p><h4 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h4><p>对字典包含的值感兴趣，可使用方法 values()来返回一个值列表，不包含任何键。</p><p>为剔除重复项，可使用<strong>集合（set）</strong>。 集合中的每个元素都必须是独一无二的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()): </span><br><span class="line"> <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></table></figure><blockquote><p>集合和字典很容易混淆，因为它们都是用一对花括号定义的。当花括号内没有键值对时， 定义的很可能是集合。不同于列表和字典，集合不会以特定的顺序存储元素。</p></blockquote><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。</p><h4 id="在列表中储存字典"><a href="#在列表中储存字典" class="headerlink" title="在列表中储存字典"></a>在列表中储存字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125; </span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125; </span><br><span class="line">aliens = [alien_0, alien_1, alien_2]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens: </span><br><span class="line"><span class="built_in">print</span>(alien) </span><br></pre></td></tr></table></figure><h4 id="在字典中存储列表"><a href="#在字典中存储列表" class="headerlink" title="在字典中存储列表"></a>在字典中存储列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储所点比萨的信息。</span></span><br><span class="line">pizza = &#123; </span><br><span class="line"> <span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>], </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment"># 概述所点的比萨。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;You ordered a <span class="subst">&#123;pizza[<span class="string">&#x27;crust&#x27;</span>]&#125;</span>-crust pizza &quot;</span> <span class="string">&quot;with the following toppings:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping) </span><br></pre></td></tr></table></figure><h2 id="第七章-用户输入和-while-循环"><a href="#第七章-用户输入和-while-循环" class="headerlink" title="第七章 用户输入和 while 循环"></a>第七章 用户输入和 while 循环</h2><h3 id="函数-input-的工作原理"><a href="#函数-input-的工作原理" class="headerlink" title="函数 input()的工作原理"></a>函数 input()的工作原理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="built_in">input</span>(<span class="string">&quot;Tell me something, and I will repeat it back to you: &quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(message) </span><br></pre></td></tr></table></figure><blockquote><p>函数 input()接受一个参数——要向用户显示的提示（prompt）或说明，让用户知道该如何做。</p></blockquote><h4 id="使用-int-来获取数值输入"><a href="#使用-int-来获取数值输入" class="headerlink" title="使用 int()来获取数值输入"></a>使用 int()来获取数值输入</h4><p>使用函数 input()时，Python将用户输入解读为字符串。</p><p>函数 int()将数的字符 串表示转换为数值表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">height = <span class="built_in">input</span>(<span class="string">&quot;How tall are you, in inches? &quot;</span>) </span><br><span class="line">height = <span class="built_in">int</span>(height) </span><br><span class="line"><span class="keyword">if</span> height &gt;= <span class="number">48</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nYou&#x27;re tall enough to ride!&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nYou&#x27;ll be able to ride when you&#x27;re a little older.&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="求模运算符"><a href="#求模运算符" class="headerlink" title="求模运算符"></a>求模运算符</h4><p>求模运算符（%）是个很有用的工具，它将两个数相除并返回余数。</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span> </span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span> </span><br><span class="line">message = <span class="string">&quot;&quot;</span> </span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>: </span><br><span class="line">message = <span class="built_in">input</span>(prompt)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> message != <span class="string">&#x27;quit&#x27;</span>: </span><br><span class="line"><span class="built_in">print</span>(message) </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用break退出循环"><a href="#使用break退出循环" class="headerlink" title="使用break退出循环"></a>使用break退出循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">&quot;\nPlease enter the name of a city you have visited:&quot;</span> </span><br><span class="line">prompt += <span class="string">&quot;\n(Enter &#x27;quit&#x27; when you are finished.) &quot;</span> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">city = <span class="built_in">input</span>(prompt) </span><br><span class="line"><span class="keyword">if</span> city == <span class="string">&#x27;quit&#x27;</span>: </span><br><span class="line"><span class="keyword">break</span> </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;I&#x27;d love to go to <span class="subst">&#123;city.title()&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="在循环中使用continue"><a href="#在循环中使用continue" class="headerlink" title="在循环中使用continue"></a>在循环中使用continue</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>: </span><br><span class="line">current_number += <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>: </span><br><span class="line"><span class="keyword">continue</span> </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(current_number)</span><br><span class="line">    <span class="comment">#只打印1到10的奇数</span></span><br></pre></td></tr></table></figure><h3 id="使用-while-循环处理列表和字典"><a href="#使用-while-循环处理列表和字典" class="headerlink" title="使用 while 循环处理列表和字典"></a>使用 while 循环处理列表和字典</h3><p>通过将 while 循环 同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。</p><h4 id="在列表之间移动元素"><a href="#在列表之间移动元素" class="headerlink" title="在列表之间移动元素"></a>在列表之间移动元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先，创建一个待验证用户列表</span></span><br><span class="line">users.py <span class="comment"># 和一个用于存储已验证用户的空列表。</span></span><br><span class="line">unconfirmed_users = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;brian&#x27;</span>, <span class="string">&#x27;candace&#x27;</span>] </span><br><span class="line">confirmed_users = [] </span><br><span class="line"><span class="comment"># 验证每个用户，直到没有未验证用户为止。</span></span><br><span class="line"><span class="comment"># 将每个经过验证的用户都移到已验证用户列表中。</span></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users: </span><br><span class="line">current_user = unconfirmed_users.pop() </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Verifying user: <span class="subst">&#123;current_user.title()&#125;</span>&quot;</span>) </span><br><span class="line">confirmed_users.append(current_user) </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 显示所有已验证的用户。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following users have been confirmed:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users: </span><br><span class="line"><span class="built_in">print</span>(confirmed_user.title()) </span><br></pre></td></tr></table></figure><h4 id="删除为特定值的所有列表元素"><a href="#删除为特定值的所有列表元素" class="headerlink" title="删除为特定值的所有列表元素"></a>删除为特定值的所有列表元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pets = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(pets) </span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets: </span><br><span class="line">pets.remove(<span class="string">&#x27;cat&#x27;</span>) </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(pets) </span><br></pre></td></tr></table></figure><h4 id="使用用户输入来填充字典"><a href="#使用用户输入来填充字典" class="headerlink" title="使用用户输入来填充字典"></a>使用用户输入来填充字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">responses = &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置一个标志，指出调查是否继续。</span></span><br><span class="line">polling_active = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">    <span class="comment"># 提示输入被调查者的名字和回答。</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name? &quot;</span>) </span><br><span class="line"> response = <span class="built_in">input</span>(<span class="string">&quot;Which mountain would you like to climb someday? &quot;</span>) </span><br><span class="line"> <span class="comment"># 将回答存储在字典中。</span></span><br><span class="line">responses[name] = response </span><br><span class="line"> <span class="comment"># 看看是否还有人要参与调查。</span></span><br><span class="line">repeat = <span class="built_in">input</span>(<span class="string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>) </span><br><span class="line"><span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>: </span><br><span class="line">polling_active = <span class="literal">False</span> </span><br><span class="line"><span class="comment"># 调查结束，显示结果。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items(): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> would like to climb <span class="subst">&#123;response&#125;</span>.&quot;</span>) </span><br></pre></td></tr></table></figure><h2 id="第八章-函数"><a href="#第八章-函数" class="headerlink" title="第八章 函数"></a>第八章 函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(): </span><br><span class="line"><span class="string">&quot;&quot;&quot;显示简单的问候语。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello!&quot;</span>) </span><br><span class="line">    </span><br><span class="line">greet_user() </span><br></pre></td></tr></table></figure><h4 id="向函数传递信息"><a href="#向函数传递信息" class="headerlink" title="向函数传递信息"></a>向函数传递信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>(<span class="params">username</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;显示简单的问候语。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;username.title()&#125;</span>!&quot;</span>) </span><br><span class="line">    </span><br><span class="line">greet_user(<span class="string">&#x27;jesse&#x27;</span>) </span><br></pre></td></tr></table></figure><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p><strong>形参（parameter）</strong>，即函数完成工作所需的信息。</p><p><strong>实参（argument）</strong>，即调用函数时传递给函数的信息。</p><h3 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h3><p>可使用位置实参，这要求实参的顺序与形参的顺序相同；也可使用关键字实参，其中每个实参都由变量名和值组成；还可使用列表和字典。</p><h4 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h4><p>调用函数时，Python 必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此， 最简单的关联方式是基于实参的顺序。这种关联方式称为位置实参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;显示宠物的信息。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My <span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>) </span><br></pre></td></tr></table></figure><h4 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h4><p>关键字实参是传递给函数的名称值对。因为直接在实参中将名称和值关联起来，所以向函数传递实参时不会混淆。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;显示宠物的信息。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My <span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>.&quot;</span>) </span><br><span class="line">    </span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>) </span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python 将使用指定的实参值；否则，将使用形参的默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;显示宠物的信息。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nI have a <span class="subst">&#123;animal_type&#125;</span>.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My <span class="subst">&#123;animal_type&#125;</span>&#x27;s name is <span class="subst">&#123;pet_name.title()&#125;</span>.&quot;</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>使用默认值时，必须先在形参列表中列出没有默认值的形参，再列出有默认值的实参。 这让 Python 依然能够正确地解读位置实参。</p></blockquote><h4 id="避免实参错误"><a href="#避免实参错误" class="headerlink" title="避免实参错误"></a>避免实参错误</h4><p>实参多于或少于函数完成工作所需的信息时，将出现实参不匹配错误。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><h4 id="返回简单值"><a href="#返回简单值" class="headerlink" title="返回简单值"></a>返回简单值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;返回整洁的姓名。&quot;&quot;&quot;</span> </span><br><span class="line">full_name = <span class="string">f&quot;<span class="subst">&#123;first_name&#125;</span> <span class="subst">&#123;last_name&#125;</span>&quot;</span> </span><br><span class="line"><span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(musician) </span><br></pre></td></tr></table></figure><h4 id="让实参变成可选的"><a href="#让实参变成可选的" class="headerlink" title="让实参变成可选的"></a>让实参变成可选的</h4><p>可使用默认值来让实参变成可选的。</p><h4 id="返回字典"><a href="#返回字典" class="headerlink" title="返回字典"></a>返回字典</h4><p>函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name, last_name, age=<span class="literal">None</span></span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息。&quot;&quot;&quot;</span> </span><br><span class="line">person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name, <span class="string">&#x27;last&#x27;</span>: last_name&#125; </span><br><span class="line"> <span class="keyword">if</span> age: </span><br><span class="line"> person[<span class="string">&#x27;age&#x27;</span>] = age </span><br><span class="line"> <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>, age=<span class="number">27</span>) </span><br><span class="line"><span class="built_in">print</span>(musician) </span><br></pre></td></tr></table></figure><blockquote><p>为特殊值 None（表示变量没有值）</p></blockquote><h3 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet_users</span>(<span class="params">names</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;向列表中的每位用户发出简单的问候。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names: </span><br><span class="line">msg = <span class="string">f&quot;Hello, <span class="subst">&#123;name.title()&#125;</span>!&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line">        </span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>, <span class="string">&#x27;ty&#x27;</span>, <span class="string">&#x27;margot&#x27;</span>] </span><br><span class="line">greet_users(usernames) </span><br></pre></td></tr></table></figure><h4 id="禁止函数修改列表"><a href="#禁止函数修改列表" class="headerlink" title="禁止函数修改列表"></a>禁止函数修改列表</h4><p>可向函数传递列表的副本而非原件。</p><p>切片表示法[:]创建列表的副本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function_name(list_name[:]) </span><br></pre></td></tr></table></figure><h3 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h3><p>有时候，预先不知道函数需要接受多少个实参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;打印顾客点的所有配料。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(toppings) </span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>) </span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>形参名*toppings 中的星号让 Python 创建一个名为 toppings 的空元组，并将收到的所有值都封装到这个元组中。</p></blockquote><h4 id="结合使用位置实参和任意数量实参"><a href="#结合使用位置实参和任意数量实参" class="headerlink" title="结合使用位置实参和任意数量实参"></a>结合使用位置实参和任意数量实参</h4><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;概述要制作的比萨。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nMaking a <span class="subst">&#123;size&#125;</span>-inch pizza with the following toppings:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> toppings: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;- <span class="subst">&#123;topping&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>) </span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>你经常会看到通用形参名*args，它也收集任意数量的位置实参。</p></blockquote><h4 id="使用任意数量的关键字实参"><a href="#使用任意数量的关键字实参" class="headerlink" title="使用任意数量的关键字实参"></a>使用任意数量的关键字实参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_profile</span>(<span class="params">first, last, **user_info</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;创建一个字典，其中包含我们知道的有关用户的一切。&quot;&quot;&quot;</span> </span><br><span class="line">user_info[<span class="string">&#x27;first_name&#x27;</span>] = first </span><br><span class="line">user_info[<span class="string">&#x27;last_name&#x27;</span>] = last </span><br><span class="line"><span class="keyword">return</span> user_info </span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;einstein&#x27;</span>, </span><br><span class="line"> location=<span class="string">&#x27;princeton&#x27;</span>, </span><br><span class="line"> field=<span class="string">&#x27;physics&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(user_profile)</span><br></pre></td></tr></table></figure><blockquote><p>你经常会看到形参名**kwargs，它用于收集任意数量的关键字实参。</p></blockquote><h3 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h3><p>将函数存储在称为模块的独立文件中，再将模块导入到主程序中。</p><p><code>import</code> 语句允许在当前运行的程序文件中使用模块中的代码。</p><h4 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h4><p>如果使用这种 <code>import</code> 语句导入了名为 module_name.py 的整个模块，就可 使用下面的语法来使用其中任何一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module_name.function_name()</span><br></pre></td></tr></table></figure><h4 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h4><p>还可以导入模块中的特定函数，这种导入方法的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br></pre></td></tr></table></figure><p>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0, function_1, function_2</span><br></pre></td></tr></table></figure><h4 id="使用-as-给函数指定别名"><a href="#使用-as-给函数指定别名" class="headerlink" title="使用 as 给函数指定别名"></a>使用 as 给函数指定别名</h4><p>如果要导入函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名。</p><p>指定别名的通用语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> fn</span><br></pre></td></tr></table></figure><h4 id="使用-as-给模块指定别名"><a href="#使用-as-给模块指定别名" class="headerlink" title="使用 as 给模块指定别名"></a>使用 as 给模块指定别名</h4><p>给模块指定别名的通用语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure><h4 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h4><p>使用星号（*）运算符可让 Python 导入模块中的所有函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> * </span><br></pre></td></tr></table></figure><blockquote><p>Python 可能遇到多个名称相同的函数或变量，进而覆盖函数，而不是分别导入所有的函数</p><p>最佳的做法是，要么只导入需要使用的函数，要么导入整个模块并使用句点表示法。</p></blockquote><h2 id="第九章-类"><a href="#第九章-类" class="headerlink" title="第九章 类"></a>第九章 类</h2><h3 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h3><h4 id="创建-Dog-类"><a href="#创建-Dog-类" class="headerlink" title="创建 Dog 类"></a>创建 Dog 类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: </span><br><span class="line"><span class="string">&quot;&quot;&quot;一次模拟小狗的简单尝试。&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;初始化属性 name 和 age。&quot;&quot;&quot;</span> </span><br><span class="line">self.name = name <span class="comment">#像这样可通过实例访问的变量称为属性</span></span><br><span class="line">self.age = age </span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>): <span class="comment">#这些方法执行时不需要额外的信息，因此它们只有一个形参 self。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;模拟小狗收到命令时蹲下。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is now sitting.&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;模拟小狗收到命令时打滚。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>类中的函数称为方法。</p><p>方法__init__是一个特殊方法，每当你根据 Dog 类创建 新实例时，Python 都会自动运行它。</p><p>务必确保__init__()的两边都 有两个下划线，否则当你使用类来创建实例时，将不会自动调用这个方法。</p><p>为何必须在方法定义中包含形参 self 呢？因 为 Python 调用这个方法来创建 Dog 实例时，将自动传入实参 self。每个与实例相关联的方法调用都自动传递实参 self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</p></blockquote><h4 id="根据类创建实例"><a href="#根据类创建实例" class="headerlink" title="根据类创建实例"></a>根据类创建实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: </span><br><span class="line"><span class="string">&quot;&quot;&quot;一次模拟小狗的简单尝试。&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;初始化属性 name 和 age。&quot;&quot;&quot;</span> </span><br><span class="line">self.name = name <span class="comment">#像这样可通过实例访问的变量称为属性</span></span><br><span class="line">self.age = age </span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>): <span class="comment">#这些方法执行时不需要额外的信息，因此它们只有一个形参 self。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;模拟小狗收到命令时蹲下。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> is now sitting.&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;模拟小狗收到命令时打滚。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> rolled over!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">my_dog = Dog(<span class="string">&#x27;Willie&#x27;</span>, <span class="number">6</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My dog&#x27;s name is <span class="subst">&#123;my_dog.name&#125;</span>.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My dog is <span class="subst">&#123;my_dog.age&#125;</span> years old.&quot;</span>) </span><br></pre></td></tr></table></figure><h3 id="使用类和实例"><a href="#使用类和实例" class="headerlink" title="使用类和实例"></a>使用类和实例</h3><h4 id="给属性指定默认值"><a href="#给属性指定默认值" class="headerlink" title="给属性指定默认值"></a>给属性指定默认值</h4><p>创建实例时，有些属性无须通过形参来定义，可在方法__init__()中为其指定默认值。</p><h4 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h4><h5 id="直接修改属性的值"><a href="#直接修改属性的值" class="headerlink" title="直接修改属性的值"></a>直接修改属性的值</h5><p>最简单的方式是通过实例直接访问它。</p><h4 id="通过方法修改属性的值"><a href="#通过方法修改属性的值" class="headerlink" title="通过方法修改属性的值"></a>通过方法修改属性的值</h4><p>将值传递给方法， 由它在内部进行更新。</p><h4 id="通过方法对属性的值进行递增"><a href="#通过方法对属性的值进行递增" class="headerlink" title="通过方法对属性的值进行递增"></a>通过方法对属性的值进行递增</h4><p>有时候需要将属性值递增特定的量，而不是将其设置为全新的值。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>一个类继承另一个类时，将自动获得另一个类的所有属性和方法。原有的类称为<strong>父类</strong>，而新类称为<strong>子类</strong>。子类继承了父类的所有属性和方法，同时还可以定义自己的属性和方法。</p><h4 id="子类的方法-init"><a href="#子类的方法-init" class="headerlink" title="子类的方法__init__()"></a>子类的方法__init__()</h4><p>在既有类的基础上编写新类时，通常要调用父类的方法__init__()。这将初始化在父类 <strong>init</strong>()方法中定义的所有属性，从而让子类包含这些属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>: </span><br><span class="line"><span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line">self.make = make </span><br><span class="line">self.model = model </span><br><span class="line">self.year = year </span><br><span class="line">self.odometer_reading = <span class="number">0</span> <span class="comment">#默认值 </span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>): </span><br><span class="line">long_name = <span class="string">f&quot;<span class="subst">&#123;self.year&#125;</span> <span class="subst">&#123;self.make&#125;</span> <span class="subst">&#123;self.model&#125;</span>&quot;</span> </span><br><span class="line"><span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;This car has <span class="subst">&#123;self.odometer_reading&#125;</span> miles on it.&quot;</span>) </span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>): </span><br><span class="line"><span class="keyword">if</span> mileage &gt;= self.odometer_reading: </span><br><span class="line">self.odometer_reading = mileage </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>): </span><br><span class="line"> self.odometer_reading += miles</span><br><span class="line">        </span><br><span class="line"><span class="comment">#ElectricCar是Car的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;电动汽车的独特之处。&quot;&quot;&quot;</span> </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line"> <span class="string">&quot;&quot;&quot;初始化父类的属性。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">super</span>().__init__(make, model, year) </span><br><span class="line">        </span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>) </span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name()) </span><br></pre></td></tr></table></figure><blockquote><p>super()是一个特殊函数，让你能够调用父类的方法。</p></blockquote><h4 id="给子类定义属性和方法"><a href="#给子类定义属性和方法" class="headerlink" title="给子类定义属性和方法"></a>给子类定义属性和方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>: </span><br><span class="line">--snip-- </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;电动汽车的独特之处。&quot;&quot;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">初始化父类的属性。</span></span><br><span class="line"><span class="string">再初始化电动汽车特有的属性。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">self.battery_size = <span class="number">75</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;This car has a <span class="subst">&#123;self.battery_size&#125;</span>-kWh battery.&quot;</span>) </span><br><span class="line">        </span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>) </span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name()) </span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure><h4 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h4><p>可在子类中定义一个与要重写的父类方法同名的方法。这样，Python 将不会考虑这个父类方法，而只关注 你在子类中定义的相应方法。</p><h4 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="将实例用作属性"></a>将实例用作属性</h4><p>有时候可能需要将类的一部分提取出来，作为一个独立的类。可以将大型类拆分成多个协同工作的小类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>: </span><br><span class="line">--snip-- </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>: </span><br><span class="line"><span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, battery_size=<span class="number">75</span></span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;初始化电瓶的属性。&quot;&quot;&quot;</span> </span><br><span class="line">self.battery_size = battery_size </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息。&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;This car has a <span class="subst">&#123;self.battery_size&#125;</span>-kWh battery.&quot;</span>) </span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;电动汽车的独特之处。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>): </span><br><span class="line"> <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string"> 初始化父类的属性。</span></span><br><span class="line"><span class="string"> 再初始化电动汽车特有的属性。</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span> </span><br><span class="line"> <span class="built_in">super</span>().__init__(make, model, year) </span><br><span class="line">self.battery = Battery() <span class="comment">#这行代码让Python创建一个新的 Battery 实例</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;每当方法__init__()被调用时，都将执行该操作，因此现在每个 ElectricCar 实例</span></span><br><span class="line"><span class="string">        都包含一个自动创建的Battery 实例。&#x27;&#x27;&#x27;</span></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2019</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name()) </span><br><span class="line">my_tesla.battery.describe_battery() </span><br></pre></td></tr></table></figure><h4 id="模拟实物"><a href="#模拟实物" class="headerlink" title="模拟实物"></a>模拟实物</h4><p>解决上述问题时，从较高的逻辑层面（而不是语法层面） 考虑；考虑的不是 Python，而是如何使用代码来表示实物</p><h3 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h3><h4 id="导入单个类"><a href="#导入单个类" class="headerlink" title="导入单个类"></a>导入单个类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car <span class="comment">#import 语句让 Python 打开模块 car 并导入其中的 Car 类。</span></span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2019</span>) </span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name()) </span><br><span class="line"></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span> </span><br><span class="line">my_new_car.read_odometer() </span><br></pre></td></tr></table></figure><h4 id="从一个模块中导入多个类"><a href="#从一个模块中导入多个类" class="headerlink" title="从一个模块中导入多个类"></a>从一个模块中导入多个类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car, ElectricCar </span><br><span class="line"></span><br><span class="line">my_beetle = Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2019</span>) </span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name()) </span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2019</span>) </span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name()) </span><br></pre></td></tr></table></figure><blockquote><p>从一个模块中导入多个类时，用逗号分隔了各个类</p></blockquote><h4 id="导入整个模块-1"><a href="#导入整个模块-1" class="headerlink" title="导入整个模块"></a>导入整个模块</h4><p>还可以导入整个模块，再使用句点表示法访问需要的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> car <span class="comment">#导入了整个 car 模块</span></span><br><span class="line"></span><br><span class="line">my_beetle = car.Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2019</span>)  <span class="comment">#使用语法 module_name.ClassName 访问需要的类</span></span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name()) </span><br><span class="line"></span><br><span class="line">my_tesla = car.ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2019</span>) </span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure><h4 id="导入模块中的所有类"><a href="#导入模块中的所有类" class="headerlink" title="导入模块中的所有类"></a>导入模块中的所有类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> * </span><br></pre></td></tr></table></figure><p>不推荐使用这种导入方式，原因有二。</p><ol><li><p>如果只看文件开头的 import 语句，就能清楚 地知道程序使用了哪些类，将大有裨益。然而这种导入方式没有明确地指出使用了模块中的哪些 类。</p></li><li><p>这种方式还可能引发名称方面的迷惑。如果不小心导入了一个与程序文件中其他东西同名的类，将引发难以诊断的错误。</p></li></ol><p>需要从一个模块中导入很多类时，最好导入整个模块，并使用 <code>module_name.ClassName 语法</code> 来访问类。这样做时，虽然文件开头并没有列出用到的所有类，但你清楚地知道在程序的哪些地 方使用了导入的模块。这也避免了导入模块中的每个类可能引发的名称冲突。</p><h4 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> electric_car <span class="keyword">import</span> ElectricCar <span class="keyword">as</span> EC  <span class="comment">#可在 import 语句中给 ElectricCar 指定一个别名</span></span><br><span class="line">my_tesla = EC(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2019</span>) </span><br></pre></td></tr></table></figure><h3 id="类编码风格"><a href="#类编码风格" class="headerlink" title="类编码风格"></a>类编码风格</h3><ol><li><p>类名应采用驼峰命名法，即将类名中的每个单词的首字母都大写，而不使用下划线。实例名和模块名都采用小写格式，并在单词之间加上下划线。</p></li><li><p>对于每个类，都应紧跟在类定义后面包含一个文档字符串。这种文档字符串简要地描述类的 功能，并遵循编写函数的文档字符串时采用的格式约定。每个模块也都应包含一个文档字符串， 对其中的类可用于做什么进行描述。</p></li><li><p>可使用空行来组织代码，但不要滥用。在类中，可使用一个空行来分隔方法；而在模块中， 可使用两个空行来分隔类。</p></li><li><p>需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的 import 语句， 再添加一个空行，然后编写导入你自己编写的模块的 import 语句。在包含多条 import 语句的程 序中，这种做法让人更容易明白程序使用的各个模块都来自何处。</p></li></ol><h2 id="第十章-文件和异常"><a href="#第十章-文件和异常" class="headerlink" title="第十章 文件和异常"></a>第十章 文件和异常</h2><h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><h4 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pi_digits.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line"><span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure><p>函数<code>open()</code>接受一个参数：要打开的文件的名称。Python在当前执行的文件所在的目录中查找指定的文件。</p><p>函数<code>open()</code>返 回一个表示文件的对象。在这里，open(‘pi_digits.txt’)返回一个表示文件pi_digits.txt 的对象， Python 将该对象赋给file_object 供以后使用。</p><p>关键字 with在不再需要访问文件后将其关闭。</p><p>我们调用了 <code>open()</code>， 但没有调用 <code>close()</code>。你只管打开文件，并在需要时使用它，Python 自会 在合适的时候自动将其关闭。</p><p>方法 <code>read()</code>读取这个文件的全部内容，并将其作为一个长长的字符串赋给变量 contents。</p><h4 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h4><p>显示文件路径时，Windows 系统使用反斜杠（\）而不是斜杠（&#x2F;），但在代码中依然可以使用斜杠。</p><blockquote><p>如果在文件路径中直接使用反斜杠，将引发错误，因为反斜杠用于对字符串中的字符进行转义。例如，对于路径”C:\path\to\file.txt”，其中的\t 将被解读为制表符。如果一 定要使用反斜杠，可对路径中的每个反斜杠都进行转义，如”C:\\path\\to\\file.txt”。</p></blockquote><h4 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h4><p>要以每次一行的方式检查文件，可对文件对象使用 for 循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line"><span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><blockquote><p>关键字 with，让 Python 负 责妥善地打开和关闭文件。为查看文件的内容，通过对文件对象执行循环来遍历文件中的每一行</p></blockquote><p>为何会出现这些空白行呢？因为在这个文件中，每行的末尾都有一个看不见的换行符，而函 数调用 print()也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，另一个来 自函数调用 print()。要消除这些多余的空白行，可在函数调用 print()中使用 rstrip()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line"> <span class="built_in">print</span>(line.rstrip()) </span><br></pre></td></tr></table></figure><h4 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h4><p>使用关键字 with 时，open()返回的文件对象只在 with 代码块内可用。如果要在 with 代码块 外访问文件的内容，可在 with 代码块内将文件的各行存储在一个列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line"><span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure><blockquote><p>read() 每次读取整个文件，它通常将读取到底文件内容放到一个字符串变量中，也就是说 .read() 生成文件内容是一个字符串类型。</p><p>readline()每只读取文件的一行，通常也是读取到的一行内容放到一个字符串变量中，返回str类型。</p><p>readlines()每次按行读取整个文件内容，将读取到的内容放到一个列表中，返回list类型。（一行一行存起来）</p></blockquote><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><h4 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object: </span><br><span class="line">file_object.write(<span class="string">&quot;I love programming.&quot;</span>) </span><br></pre></td></tr></table></figure><blockquote><p>在本例中，调用 open()时提供了两个实参。第一个实参也是要打开的文件的名称。 第二个实参（’w’）告诉 Python，要以写入模式打开这个文件。打开文件时，可指定读取模式（’r’）、 写入模式（’w’）、附加模式（’a’）或读写模式（’r+’）。如果省略了模式实参，Python 将以默认的只读模式打开文件。</p><p>如果要写入的文件不存在，函数 open()将自动创建它。然而，以写入模式（’w’）打开文件 时千万要小心，因为如果指定的文件已经存在，Python 将在返回文件对象前清空该文件的内容。</p><p>Python 只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数 str()将其转换为字符串格式。</p><p><a href="https://zhuanlan.zhihu.com/p/26573496">python中read() readline()以及readlines()区别 - 知乎 (zhihu.com)</a></p></blockquote><h4 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h4><p>函数 write()不会在写入的文本末尾添加换行符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object: </span><br><span class="line">file_object.write(<span class="string">&quot;I love programming.&quot;</span>) </span><br><span class="line">file_object.write(<span class="string">&quot;I love creating new games.&quot;</span>) </span><br></pre></td></tr></table></figure><h4 id="附加到文件"><a href="#附加到文件" class="headerlink" title="附加到文件"></a>附加到文件</h4><p>如果要给文件添加内容，而不是覆盖原有的内容，可以以附加模式(‘a’)打开文件。</p><p>以附加模式打 开文件时，Python 不会在返回文件对象前清空文件的内容，而是将写入文件的行添加到文件末尾。 如果指定的文件不存在，Python 将为你创建一个空文件。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>Python 使用称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让 Python 不知所措的错误时，它都会创建一个异常对象。</p><p>异常是使用 try-except 代码块处理的。使用 try-except 代码块时，即便出现异常，程序也将继续运行： 显示你编写的友好的错误消息，而不是令用户迷惑的 traceback。</p><h4 id="使用-try-except-代码块"><a href="#使用-try-except-代码块" class="headerlink" title="使用 try-except 代码块"></a>使用 try-except 代码块</h4><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>) </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by zero!&quot;</span>) </span><br></pre></td></tr></table></figure><h4 id="使用异常避免崩溃"><a href="#使用异常避免崩溃" class="headerlink" title="使用异常避免崩溃"></a>使用异常避免崩溃</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give me two numbers, and I&#x27;ll divide them.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter &#x27;q&#x27; to quit.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">&quot;\nFirst number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">&quot;Second number: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by 0!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure><h4 id="else-代码块"><a href="#else-代码块" class="headerlink" title="else 代码块"></a>else 代码块</h4><p>try-except-else 代码块的工作原理大致如下。Python 尝试执行 try 代码块中的代码，只有可能引发异常的代码才需要放在 try 语句中。有时候，有一些仅在 try 代码块成功执行时才需要运行的代码，这些代码应放在 else 代码块中。except 代码块告诉 Python，如果尝试运行 try 代 码块中的代码时引发了指定的异常该怎么办</p><h4 id="处理-FileNotFoundError-异常"><a href="#处理-FileNotFoundError-异常" class="headerlink" title="处理 FileNotFoundError 异常"></a>处理 FileNotFoundError 异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">contents = f.read() </span><br><span class="line"><span class="keyword">except</span> FileNotFoundError: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Sorry, the file <span class="subst">&#123;filename&#125;</span> does not exist.&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>给参数 encoding 指定了值，在系统的默认编码与要读取文件使用的 编码不一致时，必须这样做。</p></blockquote><h4 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h4><p><code>方法 split()</code>以空格为分隔符将字符串分拆成多个部分，并将这些部分都存储到一个列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;alice.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        contents = f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Sorry, the file <span class="subst">&#123;filename&#125;</span> does not exist.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Count the approximate number of words in the file.</span></span><br><span class="line">    words = contents.split()</span><br><span class="line">    num_words = <span class="built_in">len</span>(words)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The file <span class="subst">&#123;filename&#125;</span> has about <span class="subst">&#123;num_words&#125;</span> words.&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="静默失败"><a href="#静默失败" class="headerlink" title="静默失败"></a>静默失败</h4><p>要让程序静默失 败，可像通常那样编写 try 代码块，但在 except 代码块中明确地告诉 Python 什么都不要做。Python 有一个 pass 语句，可用于让 Python 在代码块中什么都不要做。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_words</span>(<span class="params">filename</span>): </span><br><span class="line"><span class="string">&quot;&quot;&quot;计算一个文件大致包含多少个单词。&quot;&quot;&quot;</span> </span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"> --snip-- </span><br><span class="line"><span class="keyword">except</span> FileNotFoundError: </span><br><span class="line"><span class="keyword">pass</span> <span class="comment">#什么都没做</span></span><br><span class="line"> <span class="keyword">else</span>: </span><br><span class="line"> --snip-- </span><br><span class="line">filenames = [<span class="string">&#x27;alice.txt&#x27;</span>, <span class="string">&#x27;siddhartha.txt&#x27;</span>, <span class="string">&#x27;moby_dick.txt&#x27;</span>, <span class="string">&#x27;little_women.txt&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames: </span><br><span class="line">count_words(filename)</span><br></pre></td></tr></table></figure><blockquote><p>pass 语句还充当了占位符，提醒你在程序的某个地方什么都没有做，并且以后也许要在这里做些什么。</p></blockquote><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>模块 json 让你能够将简单的 Python 数据结构转储到文件中，并在程序再次运行时加载该文 件中的数据。你还可以使用 json 在 Python 程序之间分享数据。</p><blockquote><p>JSON（JavaScript Object Notation）格式最初是为 JavaScript 开发的，但随后成了一种常 见格式，被包括 Python 在内的众多语言采用。</p></blockquote><h4 id="使用-json-dump-和-json-load"><a href="#使用-json-dump-和-json-load" class="headerlink" title="使用 json.dump()和 json.load()"></a>使用 json.dump()和 json.load()</h4><p><code>函数 json.dump()</code>接受两个实参：要存储的数据，以及可用于存储数据的文件对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span> <span class="comment">#使用文件扩展名.json 来指出文件存储的数据为 JSON 格式。</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(numbers, f)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>函数json.load()</code>将列表读取到内存中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json </span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f: </span><br><span class="line">numbers = json.load(f) </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(numbers) </span><br></pre></td></tr></table></figure><h4 id="保存和读取用户生成的数据"><a href="#保存和读取用户生成的数据" class="headerlink" title="保存和读取用户生成的数据"></a>保存和读取用户生成的数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果以前存储了用户名，就加载它。</span></span><br><span class="line"><span class="comment"># 否则，提示用户输入用户名并存储它。</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span> </span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f: </span><br><span class="line">username = json.load(f) </span><br><span class="line"><span class="keyword">except</span> FileNotFoundError: </span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>) </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">json.dump(username, f) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;We&#x27;ll remember you when you come back, <span class="subst">&#123;username&#125;</span>!&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;Welcome back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>代码能够正确地运行，但通过将其划分为一系列完成具体工作的 函数，还可以改进。这样的过程称为重构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stored_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Get stored username if available.&quot;&quot;&quot;</span></span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">            username = json.load(f)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_new_username</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Prompt for a new username.&quot;&quot;&quot;</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(username, f)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_user</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Greet the user by name.&quot;&quot;&quot;</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Welcome back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;We&#x27;ll remember you when you come back, <span class="subst">&#123;username&#125;</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure><blockquote><p>每个函数都执行单一而清晰的任务。</p><p>要编写出清晰而易于 维护和扩展的代码，这种划分必不可少。</p></blockquote><h2 id="第十一章-测试代码"><a href="#第十一章-测试代码" class="headerlink" title="第十一章 测试代码"></a>第十一章 测试代码</h2><h3 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h3><h4 id="可通过的测试"><a href="#可通过的测试" class="headerlink" title="可通过的测试"></a>可通过的测试</h4><p>下面的测试用例只包含一个方法，它检查函数 get_formatted_name()在给定名和姓时能否正确工作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NamesTestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Tests for &#x27;name_function.py&#x27;.&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_first_last_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Do names like &#x27;Janis Joplin&#x27; work?&quot;&quot;&quot;</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">&#x27;janis&#x27;</span>, <span class="string">&#x27;joplin&#x27;</span>)</span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Janis Joplin&#x27;</span>) <span class="comment">#断言方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_first_last_middle_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Do names like &#x27;Wolfgang Amadeus Mozart&#x27; work?&quot;&quot;&quot;</span></span><br><span class="line">        formatted_name = get_formatted_name(</span><br><span class="line">            <span class="string">&#x27;wolfgang&#x27;</span>, <span class="string">&#x27;mozart&#x27;</span>, <span class="string">&#x27;amadeus&#x27;</span>) <span class="comment">#中间名是可选的，放在后面</span></span><br><span class="line">        self.assertEqual(formatted_name, <span class="string">&#x27;Wolfgang Amadeus Mozart&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>创建了一个名 为 NamesTestCase 的类，用于包含一系列针对 get_formatted_name()的单元测试。这个类必须继承 unittest.TestCase 类，这样 Python 才知道如何运行你编写的测试。</p><p>运行 test_name_function.py 时，所有以 test_打头的方法都将自动运行。</p><p>断言方法核实得到的结果是否 与期望的结果一致。</p><p>很多测试框架都会先导入测试文件再运行。导入文件时，解释器将在导入的同时执行它。if 代码块检查特殊变量__name__，这个变量是在程序执行时设置的。如果这个文件作为主程序执行，变量__name__将被设置为’__main__‘。在这里，调用 unittest.main()来运行测试用例。如果这个文件被测试框架导入，变量的值将不是’__main__‘，因此不会调用 unittest.main()。</p></blockquote><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><h4 id="各种断言方法"><a href="#各种断言方法" class="headerlink" title="各种断言方法"></a>各种断言方法</h4><p><img src="D:\桌面\Blog\source_posts\image-20230630213741347.png" alt="image-20230630213741347"></p><h4 id="setUp-方法"><a href="#setUp-方法" class="headerlink" title="setUp()方法"></a>setUp()方法</h4><p>setUp()让我们只需创建这些对象 一次，就能在每个测试方法中使用。</p><p>测试自己编写的类时，方法 setUp()让测试方法编写起来更容易：可在 setUp()方法中创建一 系列实例并设置其属性，再在测试方法中直接使用这些实例。相比于在每个测试方法中都创建实 例并设置其属性，这要容易得多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随感</title>
      <link href="/2023/06/02/%E9%9A%8F%E6%84%9F/"/>
      <url>/2023/06/02/%E9%9A%8F%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="February-20-2023"><a href="#February-20-2023" class="headerlink" title="February 20, 2023"></a>February 20, 2023</h1><p> 什么才是内心的平静呢？此刻宿舍里只有我一人，我坐在椅子上，听到远处黑夜中的各种声音，有人声、有风声、还有其他各种声音。</p><p>当我住在老房子的时候，也是这样的，只不过那时更为安静，周围并没有多少人，而且当时也没有那么多的感受。看着窗外。黄色的灯光闪耀着，发光的广告牌在街道上，我真的想知道，你们都在哪里呢？我曾经认识过的人和我不曾认识过的人，你们都在哪里。我的朋友们，你们也会在一个瞬间想到我吗？在燥热的酷暑中，我们曾经一起奔跑，一起谈笑。可是如今，又在何地呢？我不得不承认今天的心情尤为平静，可能是前几天阅读的缘故吧。我不再想焦虑、不安。</p><p>能抓住的东西真的很少，就像是那片森林，你从其中穿过，虽然没有带走什么，但树木的芳香还残留在你的身上，你的心也能获得一丝的安宁，或许片刻，或许永恒。你看那些树木，永远地就站在那里，他们的生命是被禁锢着的，可是又因此获得自由，伸展自己的枝叶，向上茁壮地生长，这何尝不好呢？至于人，虽有双脚可以行走，又有各种交通工具得以通行。但我们真的得到了很多吗？我总会想起我到过的地方，但伤感总是大过喜悦，因为我是一个怀旧的人，就像小时候电视上播放的广告，如果他们再次在我眼前出现，我一定会哭出来的。</p><p>恍恍惚惚间，觉得人生不过如此。从一个地方到另一个地方，我们带走了肉体，或许也带走了灵魂，但思绪还总是漂浮在之前去过的地方，漂浮在另一个时间轴上。</p><p>无论如何，我会永远记得夏日的夜晚，虽然陪伴并不多，但风中的味道和声音总是最安抚我的心，让我感到无边的哀愁。</p><h1 id="June-2-2023"><a href="#June-2-2023" class="headerlink" title="June 2, 2023"></a>June 2, 2023</h1><p>已有三个月没有更新博客，感到十分抱歉。</p><p>虽然博客没有人看，但这是我与自己沟通的一个地方，由此观之，我已经三个月没有好好审视自己了。</p><p>这三个月都干了什么呢？</p><p>似乎只是昏昏度日，但也有一些值得铭记的瞬间。</p><p>我看完了天龙八部，说来也奇怪，过去二十年没看过武侠小说，也没怎么看影视翻拍剧。但当我读天龙八部的时候，我被深深的吸引了。</p><p>被其中的爱恨情仇所吸引，心中滋味万千，有些能够体会，有些却是难解。</p><p>段誉痴心于王姑娘，纵使王姑娘把全部的心都放在表哥上，他也从来不放弃，最终有情人终成眷属。</p><p>这句舔狗我是万万说不出口的。而书中我最痛恨的是阿紫，我觉得她太冷漠太冷血太残忍，段延庆也没有带给我这种感受。而游坦之真乃舔狗一个，因为阿紫，甘愿放弃了为父报仇的志向，当一只没有尊严的奴隶，甚至牺牲了自己的双眼。但最后三人跌向深谷，纷纷扰扰就此终极。</p><p>我还干了什么呢？</p><p>当我回首过去，才发现那些日子已经不太清晰了，这也显示出文字的重要性。我曾试过写日记，但没有坚持多久，总觉得流水账没有什么意义。</p><p>我总认为生活就是一个个瞬间，就是这些瞬间才使得我们的生命如此珍贵。还能想起来自己为何激动、为何伤心甚至流泪吗？日子总是一天天的过，但是我们究竟得到了什么啊！</p><p>想到自己过去干过很多蠢事，并为此洋洋得意。</p><p>想到自己过去有时戾气太重，喜怒无常。</p><p>想到自己过去浑浑噩噩，虚度时光。</p><p>想到自己过去闭门不出，任凭春色凋零。</p><p>自己忘记了很多过去的事情，有时脑子涌起一些初高中的事情，总觉得不太清晰，甚至不太真实，总得沉思一会，才能认定那事发生过。</p><p>过去交了很多朋友，也和很多人有过争执和矛盾。过去得益于一些良师，也被一些老师恶心过。</p><p>我其实也不知道自己在写什么。算是总结过去？可这些话深刻吗？或许也不需要深刻？</p><p>上周有一天下午，我突然感受到好孤独，感到这世界好冷清，一点都不热闹。或许说，热闹是他们的，我什么都没有。</p><p><em><strong>我只是跌了一跤，但是社会已经没有耐心将我扶起。</strong></em></p><p>想起来勃勃的一段话：</p><blockquote><p>高考只是生活中无数战场中的一个。在这每一次战役中，普通人靠运气，天才靠实力。其实这个问题翻译过来，就是：如果我既没有天分也没有运气，那我应该在世界上如何活下去？单凭努力么。这个问题我相信很多人仔细想想，会在深夜的浅色床单下痛哭。你问我怎么知道？因为我每天都在哭。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题日记之链表</title>
      <link href="/2023/03/27/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E4%B9%8B%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/03/27/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E4%B9%8B%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链表结构定义"><a href="#链表结构定义" class="headerlink" title="链表结构定义"></a>链表结构定义</h2><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="comment">// 结点的值</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个结点</span></span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(无参)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有一个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有两个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除链表元素"><a href="#删除链表元素" class="headerlink" title="删除链表元素"></a>删除链表元素</h2><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h3 id="JAVA-1"><a href="#JAVA-1" class="headerlink" title="JAVA"></a>JAVA</h3><h4 id="不带头结点，但带pre结点"><a href="#不带头结点，但带pre结点" class="headerlink" title="不带头结点，但带pre结点"></a>不带头结点，但带pre结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">      <span class="type">int</span> val;</span><br><span class="line">      ListNode next;</span><br><span class="line">      ListNode() &#123;&#125;</span><br><span class="line">      ListNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">      ListNode(<span class="type">int</span> val, ListNode next) &#123; <span class="built_in">this</span>.val = val; <span class="built_in">this</span>.next = next; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution203</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">null</span> &amp;&amp; head.val == val) &#123;</span><br><span class="line">            <span class="comment">//跳过链表开头等于val的结点</span></span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//若为空链表，则直接返回null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//pre指向此时head指向的结点，且可知head.val != val</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val == val) &#123;</span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">                <span class="comment">//相当于删除了cur指向的结点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                <span class="comment">//cur指向的结点数据域不为val，则继续向后寻找</span></span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">//返回头结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带虚拟头结点"><a href="#带虚拟头结点" class="headerlink" title="带虚拟头结点"></a>带虚拟头结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 因为删除可能涉及到头节点，所以设置dummy节点，统一操作</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) &#123;</span><br><span class="line">            pre.next = cur.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不带虚拟头结点和pre结点"><a href="#不带虚拟头结点和pre结点" class="headerlink" title="不带虚拟头结点和pre结点"></a>不带虚拟头结点和pre结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">null</span> &amp;&amp; head.val==val)&#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(curr!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(curr.next!=<span class="literal">null</span> &amp;&amp; curr.next.val == val)&#123;</span><br><span class="line">            curr.next = curr.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h2><p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p><p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。</p><p>如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p><p>实现 <code>MyLinkedList</code> 类：</p><ul><li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li><li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li><li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li><li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li><li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li><li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]</span><br><span class="line">[[], [1], [3], [1, 2], [1], [1], [1]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, null, 2, null, 3]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MyLinkedList myLinkedList = new MyLinkedList();</span><br><span class="line">myLinkedList.addAtHead(1);</span><br><span class="line">myLinkedList.addAtTail(3);</span><br><span class="line">myLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 2</span><br><span class="line">myLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 3</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() &#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val, ListNode next) &#123; <span class="built_in">this</span>.val = val; <span class="built_in">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//有一个头结点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || <span class="built_in">this</span>.size &lt;= index) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">                <span class="comment">//有一个头节点</span></span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt; size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//此时将该元素插入第一个位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; index;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = pre.next;</span><br><span class="line">        pre.next = cur;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; index) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                head.next = head.next.next;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                pre = pre.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre.next = pre.next.next;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>首先定义一个cur指针，指向头结点，再定义一个pre指针，初始化为null。</p><p>然后就要开始反转了，首先要把 cur-&gt;next 节点用tmp指针保存一下，也就是保存一下这个节点。</p><p>为什么要保存一下这个节点呢，因为接下来要改变 cur-&gt;next 的指向了，将cur-&gt;next 指向pre ，此时已经反转了第一个节点了。</p><p>接下来，就是循环走如下代码逻辑了，继续移动pre和cur指针。</p><p>最后，cur 指针已经指向了null，循环结束，链表也反转完毕了。 此时我们return pre指针就可以了，pre指针就指向了新的头结点。</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.gif" alt="img"></p><p><strong>提示：这个图是错的，应该先移动pre到cur所指的位置，然后再移动cur</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = cur.next;</span><br><span class="line">                cur.next = pre;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pre;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>其实递归要对应这双指针才能看得懂，return reverse(null, head);是因为我们在双指针中赋值的时候就是让cur &#x3D; head，tmp &#x3D; null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">null</span>, head);</span><br><span class="line">        <span class="comment">//头结点前面没有前驱结点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;<span class="comment">// 先保存下一个节点</span></span><br><span class="line">        cur.next = prev;<span class="comment">// 反转</span></span><br><span class="line">        <span class="comment">// 更新prev、cur位置</span></span><br><span class="line">        <span class="comment">// prev = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从后往前递归"><a href="#从后往前递归" class="headerlink" title="从后往前递归"></a>从后往前递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从后向前递归</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 边缘条件判断</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归调用，翻转第二个节点开始往后的链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        <span class="comment">// 翻转头节点与第二个节点的指向</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        <span class="comment">// 此时的 head 节点为尾节点，next 需要指向 NULL</span></span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用虚拟头结点解决链表翻转"><a href="#使用虚拟头结点解决链表翻转" class="headerlink" title="使用虚拟头结点解决链表翻转"></a>使用虚拟头结点解决链表翻转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代方法：增加虚头结点，使用头插法实现链表翻转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList1</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建虚头结点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dumpyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    dumpyHead.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 遍历所有节点</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">        <span class="comment">// 头插法</span></span><br><span class="line">        cur.next = dumpyHead.next;</span><br><span class="line">        dumpyHead.next = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dumpyHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h2><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    dummyhead.next = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">    ListNode tmp;</span><br><span class="line">    ListNode first;</span><br><span class="line">    ListNode second;</span><br><span class="line">    <span class="keyword">while</span>(cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = cur.next.next.next;</span><br><span class="line">        first = cur.next;</span><br><span class="line">        second = cur.next.next;</span><br><span class="line">        cur.next = second;</span><br><span class="line">        second.next = first;</span><br><span class="line">        first.next = tmp;</span><br><span class="line">        cur = first;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><h4 id="刚开始"><a href="#刚开始" class="headerlink" title="刚开始"></a>刚开始</h4><p><img src="D:\桌面\Blog\source_posts\image-20230327161315731.png" alt="image-20230327161315731"></p><h4 id="之后"><a href="#之后" class="headerlink" title="之后"></a>之后</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur.next = second;</span><br></pre></td></tr></table></figure><p><img src="D:\桌面\Blog\source_posts\image-20230327161952490.png" alt="image-20230327161952490"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">second.next = first;</span><br></pre></td></tr></table></figure><p><img src="D:\桌面\Blog\source_posts\image-20230327162058607.png" alt="image-20230327162058607"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first.next = tmp;</span><br></pre></td></tr></table></figure><p><img src="D:\桌面\Blog\source_posts\image-20230327162115948.png" alt="image-20230327162115948"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cur = first;</span><br></pre></td></tr></table></figure><p><img src="D:\桌面\Blog\source_posts\image-20230327162131243.png" alt="image-20230327162131243"></p><h2 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这道题不一般之处在于，强调要删除链表的倒数第N个节点，那么很多人的第一个想法是先数数一共有几个节点，然后再去移动指针。但是使用快慢指针就能解决这个问题，且不需要计算节点个数。</p><p>那么如何使用呢？首先思考一下倒数第N个，我们知道最后一个节点一定是空节点，那么这个N相当于要删除节点和空节点有N个距离。那么我们先让快慢指针同时指向头结点，然后再让快指针先移动N+1步，则此时快慢指针之间距离为N+1。</p><p>我们再让快指针和慢指针同时移动，则他们的距离始终保持，当快指针指向空节点的时候，慢指针正好指向要删除节点的前一个节点，那么删除就很容易了。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummyhead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    dummyhead.next = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">    <span class="comment">//快指针</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummyhead;</span><br><span class="line">    <span class="comment">//慢指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//让快指针移动 n + 1 步</span></span><br><span class="line">    <span class="keyword">while</span>(fast != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//快慢指针一起移动</span></span><br><span class="line">    slow.next = slow.next.next;</span><br><span class="line">    <span class="comment">//删除slow所指向的节点的下一个节点</span></span><br><span class="line">    <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">    <span class="comment">//返回头指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><p><a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></a></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>示例 1：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Intersected at &#x27;2&#x27;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><a href="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png"><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png" alt="img"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">这两个链表不相交，因此返回 null 。</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>为什么不能好好说人话呢？云里雾里！</p><p>看看英文题目吧。</p><p>Given two (singly) linked lists, determine if the two lists intersect. Return the inter­ secting node. Note that the intersection is defined based on reference（引用）, not value（值）. That is, if the kth node of the first linked list is the exact same node (by reference) as the jth node of the second linked list, then they are intersecting.</p><p>简单来说，就是求两个链表交点节点的<strong>指针</strong>。 <strong>交点不是数值相等，而是指针相等。</strong></p><p>为了方便举例，假设节点元素数值相等，则节点指针相等。</p><p>看如下两个链表，目前curA指向链表A的头结点，curB指向链表B的头结点：</p><p><img src="https://pic.leetcode-cn.com/1598234658-JlosGC-%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4_1.png" alt="面试题02.07.链表相交_1.png"></p><p>我们求出两个链表的长度，并求出两个链表长度的差值，然后让curA移动到，和curB 末尾对齐的位置，如图：</p><p><img src="https://pic.leetcode-cn.com/1598234668-MAyoGk-%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4_2.png" alt="面试题02.07.链表相交_2.png"></p><p>此时我们就可以比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA &#x3D;&#x3D; curB，则找到焦点。</p><p>否则循环退出返回空指针。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ListNode</span> <span class="variable">cura</span> <span class="operator">=</span> headA;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">curb</span> <span class="operator">=</span> headB;</span><br><span class="line"><span class="type">int</span> <span class="variable">lena</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">lenb</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cura != <span class="literal">null</span>) &#123;</span><br><span class="line">    cura = cura.next;</span><br><span class="line">    lena++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(curb != <span class="literal">null</span>) &#123;</span><br><span class="line">    curb = curb.next;</span><br><span class="line">    lenb++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求两链表长度</span></span><br><span class="line">cura = headA;</span><br><span class="line">curb = headB;</span><br><span class="line"><span class="comment">//将两指针重新指向链表首部</span></span><br><span class="line"><span class="keyword">if</span>(lenb &gt; lena) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> lenb;</span><br><span class="line">    lenb = lena;</span><br><span class="line">    lena = t;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> curb;</span><br><span class="line">    curb = cura;</span><br><span class="line">    cura = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使得A链表长度为最长</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> lena - lenb;</span><br><span class="line"><span class="comment">//计算出两链表长度的差值</span></span><br><span class="line"><span class="keyword">while</span>(len-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    cura = cura.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(cura != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(cura == curb) &#123;</span><br><span class="line">        <span class="comment">//注意，这里一定不是cura.val == curb.val 而是判断cura == curb</span></span><br><span class="line">        <span class="comment">//因为是判断引用相等，而不是值相等</span></span><br><span class="line">        <span class="keyword">return</span> cura;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        cura = cura.next;</span><br><span class="line">        curb = curb.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我好像明白了这里所说的基于引用而不是基于值是什么意思。</p><p><img src="D:\桌面\Blog\source_posts\image-20230327181512578.png" alt="image-20230327181512578"></p><p>很多人对这个样例有疑问，他们质疑为什么交点不是1呢，那是因为这个链表真实的物理地址就如图所示，他们共同指向了同一个数据域为8的节点，而他们都有一个数据域为1的节点，<strong>但这两个节点的地址可不一样。</strong></p><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><ol><li>判断链表是否有环</li></ol><p>可以使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。</p><p>为什么fast 走两个节点，slow走一个节点，有环的话，一定会在环内相遇呢，而不是永远的错开呢</p><p>首先第一点：<strong>fast指针一定先进入环中，如果fast指针和slow指针相遇的话，一定是在环中相遇，这是毋庸置疑的。</strong></p><p>那么来看一下，<strong>为什么fast指针和slow指针一定会相遇呢？</strong></p><p>可以画一个环，然后让 fast指针在任意一个节点开始追赶slow指针。</p><p>会发现最终都是这种情况， 如下图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210318162236720.png" alt="142环形链表1"></p><p>fast和slow各自再走一步， fast和slow就相遇了</p><p>这是因为fast是走两步，slow是走一步，<strong>其实相对于slow来说，fast是一个节点一个节点的靠近slow的</strong>，所以fast一定可以和slow重合。</p><p>动画如下：</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.gif" alt="141.环形链表"></p><ol start="2"><li>如果有环，如何找到这个环的入口</li></ol><p><strong>此时已经可以判断链表是否有环了，那么接下来要找这个环的入口了。</strong></p><p>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。 如图所示：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220925103433.png" alt="img"></p><p>那么相遇时： slow指针走过的节点数为: <code>x + y</code>， fast指针走过的节点数：<code>x + y + n (y + z)</code>，n为fast指针在环内走了n圈才遇到slow指针， （y+z）为 一圈内节点的个数A。</p><p>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 &#x3D; slow指针走过的节点数 * 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(x + y) * 2 = x + y + n (y + z)</span><br></pre></td></tr></table></figure><p>两边消掉一个（x+y）: <code>x + y = n (y + z)</code></p><p>因为要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。</p><p>所以要求x ，将x单独放在左面：<code>x = n (y + z) - y</code> ,</p><p>再从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：<code>x = (n - 1) (y + z) + z</code> 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。</p><p>这个公式说明什么呢？</p><p>先拿n为1的情况来举例，意味着fast指针在环形里转了一圈之后，就遇到了 slow指针了。</p><p>当 n为1的时候，公式就化解为 <code>x = z</code>，</p><p>这就意味着，<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p><p>也就是在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。</p><p>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p><p>动画如下：</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II%EF%BC%88%E6%B1%82%E5%85%A5%E5%8F%A3%EF%BC%89.gif" alt="142.环形链表II（求入口）"></p><p>那么 n如果大于1是什么情况呢，就是fast指针在环形转n圈之后才遇到 slow指针。</p><p>其实这种情况和n为1的时候 效果是一样的，一样可以通过这个方法找到 环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    fast = fast.next.next;<span class="comment">//快指针每次走两步</span></span><br><span class="line">    slow = slow.next;<span class="comment">//慢指针每次走一步</span></span><br><span class="line">    <span class="keyword">if</span>(fast == slow)<span class="comment">//此时快慢指针在环内相遇，记住该位置，然后一个指针从头结点开始走，另一个指针从相遇位置开始走</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> fast;</span><br><span class="line">        <span class="keyword">while</span>(index1 != index2)<span class="comment">//如果其相遇，则相遇的位置就是环形的入口处（通过数学推导而来）</span></span><br><span class="line">        &#123;</span><br><span class="line">            index1 = index1.next;<span class="comment">//每次都走一步</span></span><br><span class="line">            index2 = index2.next;<span class="comment">//每次都走一步</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93.png" alt="img" style="zoom:200%;" />]]></content>
      
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题日记之数组</title>
      <link href="/2023/03/27/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
      <url>/2023/03/27/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (版本一) 左闭右闭区间 [left, right]</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> middle = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//若left小于等于right，说明区间中元素不为0</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">        <span class="comment">//更新查找下标middle的值</span></span><br><span class="line">        middle = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//此时target可能会在[left,middle-1]区间中</span></span><br><span class="line">        <span class="keyword">if</span>(nums[middle] &gt; target) &#123;</span><br><span class="line">            right = middle<span class="number">-1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//此时target可能会在[middle+1,right]区间中</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &lt; target) &#123;</span><br><span class="line">            left = middle+<span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//当前下标元素等于target值时，返回middle</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若未找到target元素，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (版本二) 左闭右开区间 [left, right)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> length = numsSize;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = length;<span class="comment">//定义target在左闭右开的区间里，即：[left, right)</span></span><br><span class="line">    <span class="type">int</span> middle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;  <span class="comment">// left == right时，区间[left, right)属于空集，所以用 &lt; 避免该情况</span></span><br><span class="line">        <span class="type">int</span> middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[middle] &lt; target)&#123;</span><br><span class="line">            <span class="comment">//target位于(middle , right) 中为保证集合区间的左闭右开性，可等价为[middle + 1,right)</span></span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &gt; target)&#123;</span><br><span class="line">            <span class="comment">//target位于[left, middle)中</span></span><br><span class="line">            right = middle ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// nums[middle] == target ，找到目标值target</span></span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//未找到目标值，返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>  <span class="comment"># 定义target在左闭右闭的区间里，[left, right]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            middle = left + (right - left) // <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> nums[middle] &gt; target:</span><br><span class="line">                right = middle - <span class="number">1</span>  <span class="comment"># target在左区间，所以[left, middle - 1]</span></span><br><span class="line">            <span class="keyword">elif</span> nums[middle] &lt; target:</span><br><span class="line">                left = middle + <span class="number">1</span>  <span class="comment"># target在右区间，所以[middle + 1, right]</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> middle  <span class="comment"># 数组中找到目标值，直接返回下标</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 未找到目标值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="built_in">len</span>(nums)  <span class="comment"># 定义target在左闭右开的区间里，即：[left, right)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:  <span class="comment"># 因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</span></span><br><span class="line">            middle = left + (right - left) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[middle] &gt; target:</span><br><span class="line">                right = middle  <span class="comment"># target 在左区间，在[left, middle)中</span></span><br><span class="line">            <span class="keyword">elif</span> nums[middle] &lt; target:</span><br><span class="line">                left = middle + <span class="number">1</span>  <span class="comment"># target 在右区间，在[middle + 1, right)中</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> middle  <span class="comment"># 数组中找到目标值，直接返回下标</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 未找到目标值</span></span><br></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><h3 id="暴力方法"><a href="#暴力方法" class="headerlink" title="暴力方法"></a>暴力方法</h3><h4 id="JAVA-1"><a href="#JAVA-1" class="headerlink" title="JAVA"></a>JAVA</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><h4 id="JAVA-2"><a href="#JAVA-2" class="headerlink" title="JAVA"></a>JAVA</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有改变元素相对位置</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 快慢指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fastIndex] != val) &#123;</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">        <span class="comment">// slowIndex为移除元素后的数组元素个数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相向双指针法</span></span><br><span class="line"><span class="comment">//改变了元素相对位置，确保了移动最少元素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == val) right--; <span class="comment">//将right移到从右数第一个值不为val的位置</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] == val) &#123; <span class="comment">//left位置的元素需要移除</span></span><br><span class="line">                <span class="comment">//将right位置的元素移到left（覆盖），right位置移除</span></span><br><span class="line">                nums[left] = nums[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">while</span>(right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == val) right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h2><h3 id="暴力方法-1"><a href="#暴力方法-1" class="headerlink" title="暴力方法"></a>暴力方法</h3><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑动窗口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//滑动窗口的起始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//滑动窗口数值之和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;<span class="comment">//滑动窗口的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">                result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[left++];<span class="comment">//不断变更起始位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;<span class="comment">//如果result没有被赋值就返回0，说明没有找到符合条件的子序列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904 水果成篮"></a>904 水果成篮</h4><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 <code>fruits</code> 表示，其中 <code>fruits[i]</code> 是第 <code>i</code> 棵树上的水果 <strong>种类</strong> 。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><ul><li>你只有 <strong>两个</strong> 篮子，并且每个篮子只能装 <strong>单一类型</strong> 的水果。每个篮子能够装的水果总量没有限制。</li><li>你可以选择任意一棵树开始采摘，你必须从 <strong>每棵</strong> 树（包括开始采摘的树）上 <strong>恰好摘一个水果</strong> 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</li><li>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</li></ul><p>给你一个整数数组 <code>fruits</code> ，返回你可以收集的水果的 <strong>最大</strong> 数目。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：fruits = [1,2,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘全部 3 棵树。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：fruits = [0,1,2,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘 [1,2,2] 这三棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：fruits = [1,2,3,2,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：可以采摘 [2,3,2,2] 这四棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：可以采摘 [1,2,1,1,2] 这五棵树。</span><br></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>该题就是要寻找子序列，但是题干写的很抽象，用人话就是说要寻找最多只包含两种元素的最长子串，然后返回长度。为什么只能有两种元素呢，因为题目描述里面说只有两个篮子。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//滑动窗口的起始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//滑动窗口的终止位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//滑动窗口的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> fruits[left];<span class="comment">//第一个篮子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> fruits[right];<span class="comment">//第二个篮子</span></span><br><span class="line">        <span class="keyword">while</span>(right &lt; fruits.length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fruits[right] == l || fruits[right] == r)<span class="comment">//遇到的元素仍是篮子里装的两种</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = Math.max(result,right - left + <span class="number">1</span>);<span class="comment">//更新结果</span></span><br><span class="line">                right++;<span class="comment">//滑动窗口向右移动</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//此时遇到的元素不是篮子里的两种</span></span><br><span class="line">            &#123;</span><br><span class="line">                left = right - <span class="number">1</span>;<span class="comment">//此时right所在位置的果树是新元素（理解为第三种），那么right-1所在的位置就是第二个篮子里的元素，此时要抛弃掉第一个篮子里所装的元素</span></span><br><span class="line">                l = fruits[left];<span class="comment">//将第二个篮子里的元素装进第一个篮子里，</span></span><br><span class="line">                <span class="keyword">while</span>(left &gt;= <span class="number">1</span> &amp;&amp; fruits[left - <span class="number">1</span>] == l)</span><br><span class="line">                &#123;</span><br><span class="line">                    left--;<span class="comment">//将第一个篮子慢慢回退齐所有的连续同类</span></span><br><span class="line">                &#125;</span><br><span class="line">                r = fruits[right];<span class="comment">//同时将新遇到的元素装入第二个篮子里</span></span><br><span class="line">                result = Math.max(result,right - left + <span class="number">1</span>);<span class="comment">//再次更新结果</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;<span class="comment">//返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76 最小覆盖子串"></a>76 最小覆盖子串</h4><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br><span class="line">解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#x27;A&#x27;、&#x27;B&#x27; 和 &#x27;C&#x27;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br><span class="line">解释：整个字符串 s 是最小覆盖子串。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p><a href="https://leetcode.cn/problems/minimum-window-substring/solutions/258513/tong-su-qie-xiang-xi-de-miao-shu-hua-dong-chuang-k/">76. 最小覆盖子串 - 力扣（Leetcode）</a></p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">null</span> || s.length() == <span class="number">0</span> || t == <span class="literal">null</span> || t.length() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//滑动窗口的左边界</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//滑动窗口的有边界</span></span><br><span class="line">    <span class="type">int</span>[] need = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">200</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="comment">//子串长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> t.length();</span><br><span class="line">    <span class="comment">//t中字符的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//最小串时的起始位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; t.length();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        need[t.charAt(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(r &lt; s.length())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(r);</span><br><span class="line">        <span class="keyword">if</span>(need[c] &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//此时遇到了所需的字符</span></span><br><span class="line">        &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        need[c]--;</span><br><span class="line">        <span class="comment">//将该字符加入窗口中</span></span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">/*此时窗口中已经覆盖了所有所需要的字符,应该不断增加l使得滑动窗口缩小，直到</span></span><br><span class="line"><span class="comment">        直到碰到一个必须包含的元素，这个时候不能再扔了，再扔就不满足条件了，</span></span><br><span class="line"><span class="comment">        记录此时滑动窗口的长度，并保存最小值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c = s.charAt(l);</span><br><span class="line">                <span class="keyword">if</span>(need[c] == <span class="number">0</span>)</span><br><span class="line">                <span class="comment">//此时表示遇到了必须包含的元素，所以退出该循环</span></span><br><span class="line">                <span class="comment">//为什么呢？因为t中的字符已经在need中赋过值，所以当count为0时</span></span><br><span class="line">                <span class="comment">//其在need中的数值早已为0，而其他无关字符的值为负数</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                need[c] += <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//因为该元素不是所需的元素，被移出窗口，所以要将其对应的值加1</span></span><br><span class="line">                l++;</span><br><span class="line">                <span class="comment">//此时没有遇到必须要包含的元素，因此要向右移动l</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(r - l + <span class="number">1</span> &lt; size)</span><br><span class="line">            &#123;</span><br><span class="line">                size = r - l + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//更新长度</span></span><br><span class="line">                start = l;</span><br><span class="line">                <span class="comment">//更新最小覆盖字串的起始位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            need[s.charAt(l)]++;</span><br><span class="line">            <span class="comment">//此时l所在位置的字符要被移出窗口，所以其对应的值加1</span></span><br><span class="line">            l++;</span><br><span class="line">            <span class="comment">//将l增加一个位置，寻找新的满足条件的滑动窗口</span></span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">//因为滑动窗口扔了一个必须包含的元素，所以要将count的值再加1</span></span><br><span class="line">        &#125;</span><br><span class="line">        r++;</span><br><span class="line">        <span class="comment">//不断增加r使得滑动窗口增大，直到窗口中包含了t的所有元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size == Integer.MAX_VALUE ? <span class="string">&quot;&quot;</span> : s.substring(start,start + size);</span><br><span class="line">    <span class="comment">//若size没有更新过，则证明没有找到该字串，应该返回空串，否则将返回最小覆盖字串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h2><h3 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59 螺旋矩阵II"></a>59 螺旋矩阵II</h4><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 控制循环次数</span></span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 每次循环的开始点(start, start)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 定义填充数字</span></span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop++ &lt; n / <span class="number">2</span>) &#123; <span class="comment">// 判断边界后，loop从1开始</span></span><br><span class="line">            <span class="comment">// 模拟上侧从左到右</span></span><br><span class="line">            <span class="keyword">for</span> (j = start; j &lt; n - loop; j++) &#123;</span><br><span class="line">                res[start][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟右侧从上到下</span></span><br><span class="line">            <span class="keyword">for</span> (i = start; i &lt; n - loop; i++) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟下侧从右到左</span></span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= loop; j--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟左侧从下到上</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt;= loop; i--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            res[start][start] = count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54 螺旋矩阵"></a>54 螺旋矩阵</h4><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>与59.螺旋矩阵II不同的是：前题中的螺旋矩阵是正方形，只有正方形的边长n一个边界条件，而本题中，需要考虑长方形的长和宽(m行和n列)两个边界条件。自然，m可以等于n，即前题可视为本题在m&#x3D;&#x3D;n的特殊情况。</p><p>我们从最一般的情况开始考虑，与59.螺旋矩阵II题解对比起来，m和n的带入，主要引来两方面的差异：</p><ul><li>loop的计算： 本题的loop计算与59.螺旋矩阵II算法略微差异，因为存在rows和columns两个维度，可自行分析，loop只能取min(rows, columns)，例如rows &#x3D; 5, columns &#x3D; 7，那loop &#x3D; 5 &#x2F; 7 &#x3D; 2</li><li>mid的计算及填充： 1、同样的原理，本题的mid计算也存在上述差异； 2、 如果min(rows, columns)为偶数，则不需要在最后单独考虑矩阵最中间位置的赋值 <strong>如果min(rows, columns)为奇数，则矩阵最中间位置不只是[mid][mid],而是会留下来一个特殊的中间行或者中间列，</strong>具体是中间行还是中间列，要看rows和columns的大小，如果rows &gt; columns,则是中间列，相反，则是中间行</li></ul><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length;</span><br><span class="line"><span class="type">int</span> <span class="variable">columns</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="type">int</span> <span class="variable">startx</span> <span class="operator">=</span> <span class="number">0</span>, starty = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> Math.min(rows, columns) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//循环的次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> loop;</span><br><span class="line"><span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//偏移量</span></span><br><span class="line"><span class="keyword">while</span>(loop &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j = starty;j &lt; columns - offset;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        list.add(matrix[startx][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = startx;i &lt; rows - offset;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        list.add(matrix[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;j &gt;= offset;j--)</span><br><span class="line">    &#123;</span><br><span class="line">        list.add(matrix[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;i &gt;= offset;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        list.add(matrix[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    startx++;</span><br><span class="line">    starty++;</span><br><span class="line">    loop--;</span><br><span class="line">    offset++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Math.min(rows,columns) % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(rows &gt; columns)</span><br><span class="line">    <span class="comment">//行数大于列数，那么最后留下一列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = mid;i &lt;= mid + rows - columns;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            list.add(matrix[i][mid]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="comment">//列数大于行数，则最后留下一行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = mid;j &lt;= mid + columns - rows;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            list.add(matrix[mid][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br></pre></td></tr></table></figure><h4 id="29-顺时针打印矩阵"><a href="#29-顺时针打印矩阵" class="headerlink" title="29 顺时针打印矩阵"></a>29 顺时针打印矩阵</h4><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><p>该题目的矩阵行数和列数可以不相等，因此和54题大致是一样的，关键要处理剩下来的一行或一列</p><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] spiralOrder(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="keyword">if</span>(rows == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若该矩阵为空，访问matrix[0]会出现错误，所以返回一个空矩阵</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">columns</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> []ans = <span class="keyword">new</span> <span class="title class_">int</span> [rows * columns];</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">startx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">starty</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> Math.min(rows,columns) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> loop;</span><br><span class="line">    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(loop &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = starty;j &lt; columns - offset;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[count] = matrix[startx][j];</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = startx;i &lt; rows - offset;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[count] = matrix[i][j];</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;j &gt;= offset;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[count] = matrix[i][j];</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;i &gt;= offset;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[count] = matrix[i][j];</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        startx++;</span><br><span class="line">        starty++;</span><br><span class="line">        offset++;</span><br><span class="line">        loop--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Math.min(rows,columns) % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(rows &gt; columns)</span><br><span class="line">        <span class="comment">//行数大于列数，那么最后留下一列</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(i = mid;i &lt;= mid + rows - columns;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[count] = matrix[i][mid];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//列数大于行数，则最后留下一行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = mid;j &lt;= mid + columns - rows;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[count] = matrix[mid][j];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在周一</title>
      <link href="/2023/03/20/%E5%86%99%E5%9C%A8%E5%91%A8%E4%B8%80/"/>
      <url>/2023/03/20/%E5%86%99%E5%9C%A8%E5%91%A8%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="上周总结"><a href="#上周总结" class="headerlink" title="上周总结"></a>上周总结</h1><p>上周总体来说还是不太好的，制定的任务很多都没有完成，分析一下原因，我觉得可能是心不静吧，缺少了冥想的练习，多多少少有一些浮躁。</p><p>单词缺勤了几天，听力也同样如此。坚持非一日之功，加油啊。</p><h1 id="本周规划"><a href="#本周规划" class="headerlink" title="本周规划"></a>本周规划</h1><ol><li><p>好好写作业，争取布置的当天就能够写完。</p></li><li><p>坚持学习cs61b，好好做lab</p></li><li><p>微电影拍摄要完成大部分内容</p></li><li><p>坚持每天看书半小时</p></li><li><p>英语单词和听力每天坚持下去</p></li><li><p>至少完成两次校园跑</p></li><li><p>在周日写本周总结</p></li><li><p>学习C++，并至少刷五道算法题</p></li></ol><h1 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h1><p>这周其实我总在想过去发生的事情，初中、高中、大一各种事情都有，人生有时候真的像是放电影，那些场面就从脑海中闪过，我们收获了什么呢?</p><p>我总在想，一段记忆会被保存下来吗？宇宙中有存档吗？</p><p><em><strong>还是说只有经历这段故事的人才有可能记下来</strong></em></p><p>如果经历者全部都忘记掉，那么这段回忆是否存在？这个故事是否还存在呢？</p><p>有时候觉得很多朋友再也见不了一面了，未免有一些伤感。</p><p>仔细想想一期一会真的难以做到，我们真的不习惯珍惜。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1878812258&auto=1&height=66"></iframe><p>新的一周祝大家都开心顺利！</p><p><strong><u>I miss the days when life was so simple</u></strong></p><p>我真的好怀念过去，好怀念行尸走肉、火蓝刀锋、蓝天、白云、夏夜的微风、QQ的提示音…..</p>]]></content>
      
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大家好</title>
      <link href="/2023/03/17/%E5%A4%A7%E5%AE%B6%E5%A5%BD/"/>
      <url>/2023/03/17/%E5%A4%A7%E5%AE%B6%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>今天第一次成功搭建了博客，真的非常开心。</p><p>我在寒假就曾经尝试过搭建，但是当时遇到了一些error，有些畏难情绪，便放弃了，今天突然想再试试，结果还挺顺利的，这篇文章得以出现在你们眼前。</p><p>我希望通过这个博客，多多输出自己的一些想法吧，像是维持稳态一样，人总是要保持输入输出平衡的，只有在输出的时候才会进行更多深入的思考，大概如此吧。</p><p>可能没什么人看，但只要自己能看到就好啦，希望每一天都能开心，尽力做到想做的事情。</p><p>我在博客主页放了一些好听的音乐，希望你们喜欢，那就到这啦。</p><p>ψ(｀∇´)ψ</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>因为以后的大部分内容可能跟代码有关，因此在这里测试一下显示效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IntList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntList</span><span class="params">(<span class="type">int</span> f, IntList r)</span> &#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using... recursion! */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">this</span>.rest.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using no recursion! */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">iterativeSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">IntList</span> <span class="variable">p</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            totalSize += <span class="number">1</span>;</span><br><span class="line">            p = p.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the ith item of this IntList. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rest.get(i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method to return a string representation of an IntList */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Converts an Integer to a String!</span></span><br><span class="line">            <span class="keyword">return</span> String.valueOf(first);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> first + <span class="string">&quot; -&gt; &quot;</span> + rest.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method to create an IntList from an argument list.</span></span><br><span class="line"><span class="comment">     * You don&#x27;t have to understand this code. We have it here</span></span><br><span class="line"><span class="comment">     * because it&#x27;s convenient with testing. It&#x27;s used like this:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IntList myList = IntList.of(1, 2, 3, 4, 5);</span></span><br><span class="line"><span class="comment">     * will create an IntList 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; null.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * You can pass in any number of arguments to IntList.of and it will work:</span></span><br><span class="line"><span class="comment">     * IntList mySmallerList = IntList.of(1, 4, 9);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IntList <span class="title function_">of</span><span class="params">(<span class="type">int</span> ...argList)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (argList.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span>[] restList = <span class="keyword">new</span> <span class="title class_">int</span>[argList.length - <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(argList, <span class="number">1</span>, restList, <span class="number">0</span>, argList.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IntList</span>(argList[<span class="number">0</span>], IntList.of(restList));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那就祝大家晚安啦！</p>]]></content>
      
      
      <categories>
          
          <category> 闲聊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/17/hello-world/"/>
      <url>/2023/03/17/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
